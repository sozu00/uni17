/*
 * Basic Slider with Different Durations v1.0, a jQuery plugin.
 * A sliderhow with different durations.
 * jquery-basicdifferentdurationsslider.js
 * 
 * Based on: Basic jQuery Slider plug-in v.1.1 of John Cobb. Thanks to John.
 * (http://www.basic-slider.com, http://www.johncobb.name, twitter: @john0514.)
 * Copyright 2011, John Cobb. Free for all to use, abuse and improve under the MIT license.
 */
(function ($) { // I have decided to add always the semicolon. See http://preguntas.barrapunto.com/article.pl?sid=11/02/08/0638249
    $.fn.bjqdds = function (options) {
        var settings = {},
            defaults = {
				// Width + Height used to ensure consistency
                width: 700,
                height: 300,
				// The type of animation (slide or fade). If it is 'slide', differentDurations is ignored and not implemented.
                animation: 'fade',
                // The duration in ms of the transition between slides
                animationDuration: 450,
                // Automatically rotate through the slides
				automatic: true,
				// Delay in ms between auto rotation of the slides (ignored if differentDurations is true)
                rotationSpeed: 4000,
				// Pause the slider when any elements receive a hover event
                hoverPause: true,
				// Show the manual slider controls
                showControls: true,
				// Center the controls vertically
                centerControls: true,
				// Text to display in next/prev buttons
                nextText: 'Next',
                prevText: 'Prev',
				// Show positional markers
                showMarkers: true,
				// Center the positional indicators
                centerMarkers: true,
				// Allow navigation with arrow keys
                keyboardNav: true,
				// Use image title text as caption
                useCaptions: true,
                //Each slider has a different duration indicated in attribute 'data-duracion' of the 'li'  tag. It's indicated with the 's' of seconds, like '3s'.
                differentDurations: true
            },
            $container = this,
            $slider = $container.find('.bjqdds'),
            slides = $slider.children('li'),
            slideCount = slides.length,
            animating = false,
            paused = false,
            current = 0,
            slidePosition = 1,
            next = 0,
            $active = slides.eq(current),
            forward = 'forward',
            back = 'backward';

        // Overwrite the defaults with the provided options (if any)
        settings = $.extend({}, defaults, options);

        // From server, the li tags are fitted with a data-duration attribute, the durations of each slide.
        if(settings.differentDurations){
			var listaDuraciones = new Array(), bjqddsTimeout;
			$("#a_carruseldifdestacadoshome .bjqdds li").each(function(i, liTags){
				listaDuraciones[i] = parseInt($(liTags).attr("data-duracion").replace("s","")) * 1000;});
			settings.rotationSpeed = listaDuraciones[current]; // rotattionSpeed will be used from a different way
		}

        // Make everything consistent in size
        // TODO: move away from px and make slider responsive
        slides.css({
            'height': settings.height,
            'width': settings.width
        });
        $slider.css({
            'height': settings.height,
            'width': settings.width
        });
        $container.css({
            'height': settings.height,
            'width': settings.width
        });

        // Add unique class to slide list elements to differentiate from slide content list elements
        slides.addClass('bjqdds-slide');

        // Phat Controller(s)
        if (settings.showControls && slideCount > 1) {

            // Create the elements for the controls
            var $controlContainer = $('<ul class="bjqdds-controls"></ul>'),
                $next = $('<li><a href="#" class="bjqdds-next" class="controls">' + settings.nextText + '</a></li>'),
                $previous = $('<li><a href="#" class="bjqdds-prev" class="controls">' + settings.prevText + '</a></li>');

            // Bind click events to the controllers
            $next.click(function (e) {
                e.preventDefault();
                if (!animating) {
                    bjqddsGo(forward, false);
                }
            });

            $previous.click(function (e) {
                e.preventDefault();
                if (!animating) {
                    bjqddsGo(back, false);
                }
            });

            // Put 'em all together and what do you get? Ding dong. Hotdog
            $next.appendTo($controlContainer);
            $previous.appendTo($controlContainer);
            $controlContainer.appendTo($container);

            // Vertically center the controllers
            if (settings.centerControls) {

                var $control = $next.children('a'),
                    offset = ($container.height() - $control.height()) / 2;

                $next.children('a').css('top', offset).show();
                $previous.children('a').css('top', offset).show();
            }

        }

        // Let's put in some markers
        if (settings.showMarkers && slideCount > 1) {

            var $markerContainer = $('<ol class="bjqdds-markers"></ol>'),
                $marker, markers, offset;

            //Create a marker for each banner and add append it to the wrapper
            $.each(slides, function (key, value) {
                if (settings.animType === 'slide') {
                    if (key !== 0 && key !== slideCount - 1) {
                        $marker = $('<li><a href="#">' + key + '</a></li>');
                    }
                } else {
                    key++;
                    $marker = $('<li><a href="#">' + key + '</a></li>');
                }

                $marker.click(function (e) {
                    e.preventDefault();
                    if (!$(this).hasClass('active-marker') && !animating) {
                        bjqddsGo(false, key);
                    }
                });

                $marker.appendTo($markerContainer);

            });

            markers = $markerContainer.children('li');
            markers.eq(current).addClass('active-marker');
            $markerContainer.appendTo($container);

            if (settings.centerMarkers) {
                offset = (settings.width - $markerContainer.width()) / 2;
                $markerContainer.css('left', offset);
            }

        }

        // Enable keyboard navigation
        if (settings.keyboardNav && slideCount > 1) {

            $(document).keyup(function (event) {

                if (!paused) {
					if(settings.differentDurations) {
						clearTimeout(bjqddsTimeout);
					} else {
						clearInterval(bjqddsInterval);
					}
                    paused = true;
                }

                if (!animating) {
                    if (event.keyCode === 39) {
                        event.preventDefault();
                        bjqddsGo(forward, false);
                        
                    } else if (event.keyCode === 37) {
                        event.preventDefault();
                        bjqddsGo(back, false);
                    }
                }

                if (paused & settings.automatic) {
                	if(defaults.differentDurations){
						bjqddsTimeout=setTimeout(function(){
							bjqddsGo(forward);
						}, listaDuraciones[current]);
					} else {
						bjqddsInterval=setInterval(function(){
							bjqddsGo(forward);
						}, settings.rotationSpeed);}
					}
                	paused = false;
                }
            );
        }

        // Show captions
        if (settings.useCaptions) {

            $.each(slides, function (key, value) {

                var $slide = $(value);
                var $slideChild = $slide.children('img:first-child');
                var title = $slideChild.attr('title');

                if (title) {
                    var $caption = $('<p class="bjqdds-caption">' + title + '</p>');
                    $caption.appendTo($slide);
                }

            });

        }

        // Run a bubble-bath and float in that m'fkr like a hovercraft. (enable hover pause)
        if (settings.hoverPause && settings.automatic) {

            $container.hover(function () {
                if (!paused) {
                    if(settings.differentDurations){
						clearTimeout(bjqddsTimeout);
					}else{
						clearInterval(bjqddsInterval);
					}					
                    paused = true;
                }
            }, function () {
                if (paused) {
                	if(settings.differentDurations) {
                		if (settings.animation==="fade") {
                			bjqddsTimeout = setTimeout(function () {
                				bjqddsGo(forward);
                			},
                			listaDuraciones[current]);
                		} else {
                			if (slidePosition <= listaDuraciones.length) {
                				bjqddsTimeout = setTimeout( function () {
                					bjqddsGo(forward);
                				},
                				listaDuraciones[slidePosition-1]);
							}
							else {
								bjqddsTimeout = setTimeout( function () {
									bjqddsGo(forward);
								},
								listaDuraciones[0]);
							}
                		}
                	} else {
                		bjqddsInterval = setInterval(function () {
                			bjqddsGo(forward);
                		},
						settings.rotationSpeed);
					}
                    paused = false;
                }});}

        // We have to make a few tweaks if we're sliding instead of fading
        if (settings.animation === 'slide' && slideCount > 1) {

            $first = slides.eq(0);
            $last = slides.eq(slideCount - 1);

            $first.clone().addClass('clone').removeClass('slide').appendTo($slider);
            $last.clone().addClass('clone').removeClass('slide').prependTo($slider);

            slides = $slider.children('li');
            slideCount = slides.length;

            $wrapper = $('<div class="bjqdds-wrapper"></div>').css({
                'width': settings.width,
                'height': settings.height,
                'overflow': 'hidden',
                'position': 'relative'
            });

            $slider.css({
                'width': settings.width * slideCount,
                'left': -settings.width
            });

            slides.css({
                'float': 'left',
                'position': 'relative',
                'display': 'list-item'
            });

            $wrapper.prependTo($container);
            $slider.appendTo($wrapper);

        }

        // Check position to see if we're at the first or last slide and update 'next' accordingly
        var checkPosition = function (direction) {

                if (settings.animation === 'fade') {

                    if (direction === forward) {
                        !$active.next().length ? next = 0 : next++
                    } else if (direction === back) {
                        !$active.prev().length ? next = slideCount - 1 : next--
                    }

                }

                if (settings.animation === 'slide') {

                    if (direction === forward) {
                        next = slidePosition + 1;
                    }

                    if (direction === back) {
                        next = slidePosition - 1;
                    }
                }

                return next;
            }

        // Kick off the rotation if we're on auto pilot, but only if we have more than 1 slide (thanks Efrain!)
        if (settings.automatic && slideCount > 1) {

            if (settings.differentDurations){
				var bjqddsTimeout = setTimeout(function(){
					settings.animation === "fade" ? bjqddsGo(forward, false) : bjqddsGo(forward);
				},
				listaDuraciones[current]);
			} else {
				var bjqddsInterval = setInterval(function() {
					bjqddsGo(forward, false);
				},
				settings.rotationSpeed);
			}

        }

        // Show the first slide	
        slides.eq(current).show();
        $slider.show();

        // What comes next? Hey, Bust a move!
        var bjqddsGo = function (direction, position) {

                if (!animating) {

                    if (direction) {
                        next = checkPosition(direction);
                    } else if (position && settings.animation === 'fade') {
                        next = position - 1;
                    } else {
                        next = position;
                    }

                    animating = true;

                    if (settings.animation === 'fade') {

                        if (settings.showMarkers) {
                            markers.eq(current).removeClass('active-marker');
                            markers.eq(next).addClass('active-marker');
                        }

                        $next = slides.eq(next);

                        $active.fadeOut(settings.animationDuration);
                        $next.fadeIn(settings.animationDuration, function () {
                            $active.hide();
                            current = next;
                            $active = $next;
                            animating = false;
                            if (settings.differentDurations) {
								if (!paused) {
									clearTimeout(bjqddsTimeout);
									bjqddsTimeout = setTimeout(function () {
										bjqddsGo(forward, false);
									},
								listaDuraciones[current]);
							}}}
                        );
						
                    } else if (settings.animation === 'slide') {

                        if (settings.showMarkers) {

                            markers.eq(slidePosition - 1).removeClass('active-marker');

                            if (next === slideCount - 1) {
                                markers.eq(0).addClass('active-marker');
                            } else if (next === 0) {
                                markers.eq(slideCount - 3).addClass('active-marker');
                            } else {
                                markers.eq(next - 1).addClass('active-marker');
                            }

                        }

                        $slider.animate({
                            'left': -next * settings.width
                        }, settings.animationDuration, function () {

                            if (next === 0) {
                                slidePosition = slideCount - 2;
                                $slider.css({
                                    'left': -slidePosition * settings.width
                                });
                            } else if (next === slideCount - 1) {
                                slidePosition = 1;
                                $slider.css({
                                    'left': -settings.width
                                });
                            } else {
                                slidePosition = next;
                            }

                            animating = false;

                        });

                        // After the animation, the next animation needs to start, but only if all it's not paused and after waiting the time given by the current slide
                        if(settings.differentDurations){
							if(!paused){
								clearTimeout(bjqddsTimeout); // Mío !!
								bjqddsTimeout = setTimeout( function () {
									bjqddsGo(forward)
								},
								listaDuraciones[ slidePosition < listaDuraciones.length ? slidePosition : 0 ]);
							}
						}

                    }

                }

            }

        return this; // KTHXBYE
  }})(jQuery);